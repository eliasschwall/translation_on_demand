```{r}
#| label: Loading function and data

library(here)
list.files(here("R"), full.names = T) |> lapply(source)
ToD_candidates_list <- here("data/processed", "ToD_candidates_list.rds") %>% readRDS()
```

```{r UTRs}
mart <- biomaRt::useEnsembl(biomart = "genes", dataset = "mmusculus_gene_ensembl")

ToDC_all_utrs <- lapply(names(ToD_candidates_list), function(time_point) {
  get_utrs(ToD_candidates_list[[time_point]], mart.object = mart)
})

# Set the names of the list to the time points
names(ToDC_all_utrs) <- names(ToD_candidates_list)

saveRDS(ToDC_all_utrs, here("data/reference", "ToDC_all_utrs.rds"))
```


```{r Analysing UTRs}
input_genes <- ToD_candidates_list[["1h_vs_0h"]]$mgi_symbol

# Analyze 5' UTRs
five_prime_analysis <- analyze_utr_data(ToDC_all_utrs$`1h_vs_0h`$utr_5, 
                                      input_genes, 
                                      "1h_vs_0h", 
                                      "five_prime")

# Analyze 3' UTRs
three_prime_analysis <- analyze_utr_data(ToDC_all_utrs$`1h_vs_0h`$utr_3, 
                                       input_genes, 
                                       "1h_vs_0h", 
                                       "three_prime")
```


```{r}
#| label: Meme Analsis 
memes::check_meme_install(meme_path = "/meme_installation/meme-5.5.7/meme/bin/")
library(memes)
background_genes <- readRDS("/data/data/processed/background_genes.rds") %>% as.data.frame() %>% setNames(c("mgi_symbols"))
all_utrs <- get_utrs(background_genes)
all_5_UTRs <- Biostrings::DNAStringSet(all_utrs$utr_5$five_prime_utr)
names(all_5_UTRs) <- all_utrs$utr_5$mgi_symbol

h1_vs_h0_5_prime_utrs <- Biostrings::DNAStringSet(ToDC_all_utrs$`1h_vs_0h`$utr_5$five_prime_utr)
names(h1_vs_h0_5_prime_utrs) <- ToDC_all_utrs$`1h_vs_0h`$utr_5$mgi_symbol

h6_vs_h1_5_prime_utrs <- Biostrings::DNAStringSet(ToDC_all_utrs$`6h_vs_1h`$utr_5$five_prime_utr)
names(h6_vs_h1_5_prime_utrs) <- ToDC_all_utrs$`6h_vs_1h`$utr_5$mgi_symbol
# Write the UTR sequences to a temporary FASTA file
Biostrings::writeXStringSet(h1_vs_h0_5_prime_utrs, here("data/reference","temp_5_prime_utrs.fasta"))

runAme(input = h6_vs_h1_5_prime_utrs,
       control = all_5_UTRs,
       database = "/data/data/reference/motif_databases/CISBP-RNA/Mus_musculus.meme",
       meme_path = "/meme_installation/meme-5.5.7/meme/bin/") %>% plot_ame_heatmap()
```

```{r}

```





















PLOTS FOR PROGRESS REPORT 2


```{r}
library(DESeq2)
library(tidyverse)

# --- Define Comparisons for RNA ---
rna_contrasts <- list(
  "1h_vs_0h"  = c("timepoint", "1h",  "0h"),
  "6h_vs_1h"  = c("timepoint", "6h",  "1h"),
  "12h_vs_6h" = c("timepoint", "12h", "6h"),
  "24h_vs_12h"= c("timepoint", "24h", "12h"),
  "36h_vs_24h"= c("timepoint", "36h", "24h"),
  "48h_vs_36h"= c("timepoint", "48h", "36h"),
  "72h_vs_48h"= c("timepoint", "72h", "48h")
)

# --- Define Corresponding Proteomics Log2FC Columns ---
prot_fc_cols <- c(
  "1h_vs_0h"  = "log2FC_0m_1h",
  "6h_vs_1h"  = "log2FC_1h_6h",
  "12h_vs_6h" = "log2FC_6h_12h",
  "24h_vs_12h"= "log2FC_12h_24h",
  "36h_vs_24h"= "log2FC_24h_36h",
  "48h_vs_36h"= "log2FC_36h_48h",
  "72h_vs_48h"= "log2FC_48h_72h"
)

# --- Compute Global Standard Deviation of log2FC for RNA ---
rna_sd <- sapply(names(rna_contrasts), function(comp_name) {
  res <- results(dds, contrast = rna_contrasts[[comp_name]])
  sd(res$log2FoldChange, na.rm = TRUE)
})
names(rna_sd) <- names(rna_contrasts)

# --- Compute Global Standard Deviation of log2FC for Proteomics ---
prot_sd <- sapply(names(prot_fc_cols), function(comp_name) {
  fc_vals <- prot_matched[[ prot_fc_cols[comp_name] ]]
  sd(fc_vals, na.rm = TRUE)
})
names(prot_sd) <- names(prot_fc_cols)

# --- Combine Standard Deviation Data into a Data Frame ---
sd_df <- tibble(
  Comparison = names(rna_sd),
  RNA_SD = as.numeric(rna_sd),
  Proteomics_SD = as.numeric(prot_sd)
) %>%
  # Order comparisons sequentially
  mutate(Comparison = factor(Comparison, 
                             levels = c("1h_vs_0h", "6h_vs_1h", "12h_vs_6h",
                                        "24h_vs_12h", "36h_vs_24h", "48h_vs_36h", "72h_vs_48h"))) %>%
  # Replace only the literal "_vs_" with " vs " for prettier labels
  mutate(Comparison = as.character(Comparison),
         Comparison = gsub("_vs_", " vs ", Comparison),
         Comparison = factor(Comparison, levels = unique(Comparison)))

# Print the computed standard deviations
print("Computed Standard Deviations for Each Timepoint Comparison:")
print(sd_df)

# Reshape data for plotting
sd_long <- sd_df %>%
  pivot_longer(cols = c("RNA_SD", "Proteomics_SD"),
               names_to = "DataType",
               values_to = "SD") %>%
  mutate(DataType = recode(DataType, 
                           "RNA_SD" = "RNA", 
                           "Proteomics_SD" = "Proteomics"))

# --- Create the Publication-Quality Plot with Larger Fonts ---
ggplot(sd_long, aes(x = Comparison, y = SD, fill = DataType)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  scale_fill_manual(values = c("RNA" = "#4C72B0", "Proteomics" = "#C44E52")) +
  labs(title = "Global Standard Deviation of Log₂ Fold Changes by Timepoint Comparison",
       x = "Timepoint Comparison",
       y = "Standard Deviation of Log₂ Fold Change",
       fill = "Data Type") +
  theme_classic(base_size = 18) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 18),
        axis.text.y = element_text(size = 18),
        axis.title.x = element_text(size = 20),
        axis.title.y = element_text(size = 20),
        plot.title = element_text(size = 22, face = "bold"),
        legend.title = element_text(size = 18),
        legend.text = element_text(size = 16))
```



```{r ratios plot} 
library(tidyverse)

# Combine the matched stable genes from all contrasts into one data frame.
# (Assumes matched_list contains only the matched stable genes for each contrast.)
diff_df <- bind_rows(lapply(names(matched_list), function(comp) {
  df <- matched_list[[comp]]
  df$Comparison <- comp  # add a column with the contrast name
  df
}))

# Reformat the comparison labels (e.g., "1h_vs_0h" becomes "1h vs 0h") and set the factor levels in order.
diff_df <- diff_df %>%
  mutate(Comparison = gsub("_vs_", " vs ", Comparison)) %>%
  mutate(Comparison = factor(Comparison, levels = c("1h vs 0h", 
                                                    "6h vs 1h", 
                                                    "12h vs 6h", 
                                                    "24h vs 12h", 
                                                    "36h vs 24h", 
                                                    "48h vs 36h", 
                                                    "72h vs 48h")))

# Create a density plot of the "diff" values for the matched stable genes.
p_diff <- ggplot(diff_df, aes(x = diff, color = Comparison)) +
  geom_density(size = 1.5) +
  labs(title = "Density of log₂FC Differences for Matched Stable Genes",
       x = "Difference (Proteomics - RNA log₂FC)",
       y = "Density",
       color = "Timepoint Comparison") +
  theme_classic(base_size = 24) +
  theme(axis.text.x = element_text(size = 22, angle = 45, hjust = 1),
        axis.text.y = element_text(size = 22),
        axis.title.x = element_text(size = 26),
        axis.title.y = element_text(size = 26),
        plot.title = element_text(size = 28, face = "bold"),
        legend.title = element_text(size = 26),
        legend.text = element_text(size = 24),
        legend.position = c(0.8, 0.8)) +
  guides(color = guide_legend(reverse = TRUE, ncol = 1))

print(p_diff)
```


```{r Variance scaling matched proteomics within each timepoint comparison}

prot_matched_scaled <- prot_matched %>%
  dplyr::mutate(across(dplyr::starts_with("log2FC_"),
                       ~ . / sd(., na.rm = TRUE),
                       .names = "{.col}_scaled"))

# Print summary statistics for each scaled column.
scaled_cols <- names(prot_matched_scaled)[grepl("_scaled$", names(prot_matched_scaled))]
for (col in scaled_cols) {
  cat("Summary for", col, ":\n")
  print(summary(prot_matched_scaled[[col]]))
  cat("-----\n")
}

# Optionally, if you want to inspect the first few rows:
print(head(prot_matched_scaled))
```